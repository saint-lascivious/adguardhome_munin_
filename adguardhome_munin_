#!/usr/bin/env sh

#          _                       _ _                                 _
#  __ _ __| |__ _ _  _ __ _ _ _ __| | |_  ___ _ __  ___ _ __ _  _ _ _ (_)_ _
# / _` / _` / _` | || / _` | '_/ _` | ' \/ _ \ '  \/ -_) '  \ || | ' \| | ' \
# \__,_\__,_\__, |\_,_\__,_|_| \__,_|_||_\___/_|_|_\___|_|_|_\_,_|_||_|_|_||_|
#           |___/

# saint-lascivious (Hayden Pearce), 2025

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

set -e

case "${0}" in
    /*)
        script_path="${0}"
    ;;
    *)
        script_path="$(cd "$(dirname "${0}")" && pwd)/$(basename "${0}")"
    ;;
esac

adguardhome_munin_plugin_id="$(printf "%s" "${script_path}" | sed -e 's/^.*adguardhome_munin_//')"

if [ -z "${adguardhome_munin_plugin_id}" ]; then
    # This should never happen
    adguardhome_munin_plugin_id="percent"
fi

adguardhome_munin_plugins="blocked clients domains percent processing queries status upstreams upstreams_avg"

pref="${proto:-"https"}"
host="${host:-"127.0.0.1"}"
port="${port:-"443"}"

api="${pref}://${host}:${port}"

top_n="${top_n:-"10"}"

if [ "${top_n}" -gt "20" ]; then
    top_n="20"
elif [ "${top_n}" -lt "1" ]; then
    top_n="1"
fi

user="${username:-}"
pass="${password:-}"

graph="${graph:-"yes"}"
graph_args="${graph_args:-"--lower-limit 0"}"
graph_category="${graph_category:-"dns"}"
graph_draw="${graph_draw:-"LINE1"}"
graph_height="${graph_height:-"200"}"
graph_scale="${graph_scale:-"no"}"
graph_type="${graph_type:-"GAUGE"}"
graph_width="${graph_width:-"400"}"

state_dir=${MUNIN_PLUGSTATE:-"/tmp/adguardhome_munin_"}
state_file="${state_dir}/${adguardhome_munin_plugin_id}.state"

mkdir -p "${state_dir}"

cookie_file=$(mktemp "${state_dir}/cookie_file.XXXXXX" 2>/dev/null || mktemp -t cookie_file.XXXXXX)

trap 'rm -f "${cookie_file}"' EXIT

adguardhome_munin_print() {
    #  ${1} = key
    #  ${2} = colour
    #  ${3} = critical
    #  ${4} = draw
    #  ${5} = graph
    #  ${6} = info
    #  ${7} = label
    #  ${8} = max
    #  ${9} = min
    # ${10} = type
    # ${11} = warning
    if ! printf %s "${1}" | grep -Eq '^[a-zA-Z_][a-zA-Z0-9_]*$'; then
        printf "%s\n" "Error: Invalid or missing key." >&2
        exit 1
    fi
    if [ -z "${7}" ] || printf %s "${7}" | grep -q '[#\\]'; then
        printf "%s\n" "Error: Invalid or missing label." >&2
        exit 1
    fi
    if [ -n "${2}" ] && [ -n "$(printf '%s' "${2}" | tr -d '[:space:]')" ]; then
        colour_val="${2#\#}"
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{3}$'; then
            r=$(printf %s "${colour_val}" | cut -c1)
            g=$(printf %s "${colour_val}" | cut -c2)
            b=$(printf %s "${colour_val}" | cut -c3)
            colour_val="${r}${r}${g}${g}${b}${b}"
        fi
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{6}$'; then
            printf "%s.colour %s\n" "${1}" "${colour_val}"
        fi
    fi
    if [ -n "${3}" ] && [ -n "$(printf '%s' "${3}" | tr -d '[:space:]')" ]; then
        if printf %s "${3}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.critical %s\n" "${1}" "${3}"
        fi
    fi
    if [ -n "${4}" ] && [ -n "$(printf '%s' "${4}" | tr -d '[:space:]')" ]; then
        if printf %s "${4}" | grep -Eq '^LINE[0-9]*$|^AREA$|^STACK$|^AREASTACK$|^LINESTACK[0-9]*$'; then
            printf "%s.draw %s\n" "${1}" "${4}"
        fi
    fi
    if [ -n "${5}" ] && [ -n "$(printf '%s' "${5}" | tr -d '[:space:]')" ]; then
        case "${5}" in
            "yes"|"no")
                printf "%s.graph %s\n" "${1}" "${5}"
            ;;
        esac
    fi
    if [ -n "${6}" ] && [ -n "$(printf '%s' "${6}" | tr -d '[:space:]')" ]; then
        printf "%s.info %s\n" "${1}" "${6}"
    fi
    printf "%s.label %s\n" "${1}" "${7}"
    if [ -n "${8}" ] && [ -n "$(printf '%s' "${8}" | tr -d '[:space:]')" ]; then
        if printf %s "${8}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)$'; then
            printf "%s.max %s\n" "${1}" "${8}"
        fi
    fi
    if [ -n "${9}" ] && [ -n "$(printf '%s' "${9}" | tr -d '[:space:]')" ]; then
        if printf %s "${9}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)$'; then
            printf "%s.min %s\n" "${1}" "${9}"
        fi
    fi
    if [ -n "${10}" ] && [ -n "$(printf '%s' "${10}" | tr -d '[:space:]')" ]; then
        case "${10}" in
            "GAUGE"|"COUNTER"|"DERIVE"|"ABSOLUTE")
                printf "%s.type %s\n" "${1}" "${10}"
            ;;
        esac
    fi
    if [ -n "${11}" ] && [ -n "$(printf '%s' "${11}" | tr -d '[:space:]')" ]; then
        if printf %s "${11}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.warning %s\n" "${1}" "${11}"
        fi
    fi
}

adguardhome_munin_print_from_state() {
    #  ${1} = state_file
    #  ${2} = plugin_type (domain, client, upstream, etc)
    #  ${3} = colour
    #  ${4} = critical
    #  ${5} = draw
    #  ${6} = graph
    #  ${7} = info
    #  ${8} = max
    #  ${9} = min
    # ${10} = type
    # ${11} = warning
    # ${12} = none_info
    # ${13} = none_label
    if [ -s "${1}" ]; then
        while IFS= read -r raw; do
            key=$(printf "%s" "${raw}" | tr -c 'a-zA-Z0-9' '_')
            case "${key}" in
                [0-9]*)
                    key="${2}_${key}"
                    ;;
            esac
            if [ "${#raw}" -gt 19 ]; then
                label="$(printf "%s" "${raw}" | cut -c1-16)..."
            else
                label="${raw}"
            fi
            adguardhome_munin_print \
                "${key}" \
                "${3}" \
                "${4}" \
                "${5}" \
                "${6}" \
                "${raw}" \
                "${label}" \
                "${8}" \
                "${9}" \
                "${10}" \
                "${11}"
        done < "${1}"
    else
        adguardhome_munin_print \
            "none" \
            "${3}" \
            "${4}" \
            "${5}" \
            "${6}" \
            "${12}" \
            "${13}" \
            "${8}" \
            "${9}" \
            "${10}" \
            "${11}"
    fi
}

adguardhome_munin_auth() {
    response=$(curl --connect-timeout 5 -k -s -L \
        -H "Content-Type: application/json" \
        -c "${cookie_file}" \
        -d "{\"name\":\"${user}\",\"password\":\"${pass}\"}" \
        -w "\n%{http_code}" \
        "${api}/control/login")
    http_code=$(printf "%s" "${response}" | tail -n1)
    case "${http_code}" in
        "200")
            return 0
            ;;
        "400")
            printf "Error: Invalid username/password..\n" >&2
            return 1
            ;;
        "429")
            printf "Error: Out of login attempts.\n" >&2
            return 1
            ;;
        *)
            printf "Error: Unexpected HTTP response from AdGuard Home API (login): %s\n" "${http_code}" >&2
            return 1
            ;;
    esac
}

adguardhome_munin_logout() {
    response=$(curl --connect-timeout 5 -k -s -L \
        -H "Content-Type: application/json" \
        -b "${cookie_file}" \
        -w "\n%{http_code}" \
        "${api}/control/logout")
    http_code=$(printf "%s" "${response}" | tail -n1)
    rm -f "${cookie_file}"
    case "${http_code}" in
        "200")
            return 0
            ;;
        *)
            printf "%s\n" "Error: Unexpected HTTP response from AdGuard Home API (logout): ${http_code}" >&2
            return 1
            ;;
    esac
}

adguardhome_munin_config_blocked() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home blocked domains" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} blocked domains" \
        "graph_vlabel queries" \
        "graph_width ${graph_width}"
    blocked_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/blocked_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "blocked_keys_tmp.XXXXXX")
    printf "%s\n" "${blocked_response}" | jq -r ".top_blocked_domains[:${top_n}][] | to_entries[] | \"\(.key)\"" | \
    while read -r blocked_domain; do
        printf "%s\n" "${blocked_domain}" >> "${tmp_keys_file}"
    done
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
            mv "${tmp_keys_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "blocked" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home blocked domains" \
        "blocked" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No blocked domains" \
        "none"
}

adguardhome_munin_fetch_blocked() {
    blocked_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/blocked_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "blocked_keys_tmp.XXXXXX")
    tmp_output_file=$(mktemp "${state_dir}/blocked_output_tmp.XXXXXX" 2>/dev/null || mktemp -t "blocked_output_tmp.XXXXXX")
    printf "%s\n" "${blocked_response}" | jq -r ".top_blocked_domains[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    while read -r blocked_domain num_blocked; do
        printf "%s\n" "${blocked_domain}" >> "${tmp_keys_file}"
        key=$(printf "%s" "${blocked_domain}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="blocked_${key}"
                ;;
        esac
        printf "%s.value %s\n" "${key}" "${num_blocked}" >> "${tmp_output_file}"
    done
    if [ -f "${state_file}" ]; then
        cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
        mv "${tmp_keys_file}.merged" "${state_file}"
    else
        mv "${tmp_keys_file}" "${state_file}"
    fi
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        rm -f "${tmp_output_file}"
        return
    fi
    while IFS= read -r blocked_domain; do
        key=$(printf "%s" "${blocked_domain}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="blocked_${key}"
                ;;
        esac
        grep "^${key}\.value " "${tmp_output_file}" || printf "%s.value U\n" "${key}"
    done < "${state_file}"
    rm -f "${tmp_keys_file}" "${tmp_output_file}"
}

adguardhome_munin_config_clients() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home clients" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} clients" \
        "graph_vlabel queries" \
        "graph_width ${graph_width}"
    clients_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/clients_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "clients_keys_tmp.XXXXXX")
    printf "%s\n" "${clients_response}" | jq -r ".top_clients[:${top_n}][] | to_entries[] | \"\(.key)\"" | \
    while read -r client; do
        printf "%s\n" "${client}" >> "${tmp_keys_file}"
    done
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
            mv "${tmp_keys_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "client" \
        "" \
        "100000" \
        "${graph_draw}" \
        "yes" \
        "" \
        "" \
        "0" \
        "${graph_type}" \
        "0:50000" \
        "No clients" \
        "none"
}

adguardhome_munin_fetch_clients() {
    clients_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/clients_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "clients_keys_tmp.XXXXXX")
    tmp_output_file=$(mktemp "${state_dir}/clients_output_tmp.XXXXXX" 2>/dev/null || mktemp -t "clients_output_tmp.XXXXXX")
    printf "%s\n" "${clients_response}" | jq -r ".top_clients[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    while read -r client num_queries; do
        printf "%s\n" "${client}" >> "${tmp_keys_file}"
        key=$(printf "%s" "${client}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="client_${key}"
                ;;
        esac
        printf "%s.value %s\n" "${key}" "${num_queries}" >> "${tmp_output_file}"
    done
    if [ -f "${state_file}" ]; then
        cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
        mv "${tmp_keys_file}.merged" "${state_file}"
    else
        mv "${tmp_keys_file}" "${state_file}"
    fi
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        rm -f "${tmp_output_file}"
        return
    fi
    while IFS= read -r client; do
        key=$(printf "%s" "${client}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="client_${key}"
                ;;
        esac
        grep "^${key}\.value " "${tmp_output_file}" || printf "%s.value U\n" "${key}"
    done < "${state_file}"
    rm -f "${tmp_keys_file}" "${tmp_output_file}"
}

adguardhome_munin_config_domains() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home domains" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} domains" \
        "graph_vlabel queries" \
        "graph_width ${graph_width}"
    domains_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/domains_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "domains_keys_tmp.XXXXXX")
    printf "%s\n" "${domains_response}" | jq -r ".top_queried_domains[:${top_n}][] | to_entries[] | \"\(.key)\"" | \
    while read -r domain; do
        printf "%s\n" "${domain}" >> "${tmp_keys_file}"
    done
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
            mv "${tmp_keys_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "domain" \
        "" \
        "100000" \
        "${graph_draw}" \
        "yes" \
        "" \
        "" \
        "0" \
        "${graph_type}" \
        "0:50000" \
        "No domains" \
        "none"
}

adguardhome_munin_fetch_domains() {
    domains_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/domains_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "domains_keys_tmp.XXXXXX")
    tmp_output_file=$(mktemp "${state_dir}/domains_output_tmp.XXXXXX" 2>/dev/null || mktemp -t "domains_output_tmp.XXXXXX")
    printf "%s\n" "${domains_response}" | jq -r ".top_queried_domains[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    while read -r domain num_queries; do
        printf "%s\n" "${domain}" >> "${tmp_keys_file}"
        key=$(printf "%s" "${domain}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="domain_${key}"
                ;;
        esac
        printf "%s.value %s\n" "${key}" "${num_queries}" >> "${tmp_output_file}"
    done
    if [ -f "${state_file}" ]; then
        cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
        mv "${tmp_keys_file}.merged" "${state_file}"
    else
        mv "${tmp_keys_file}" "${state_file}"
    fi
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        rm -f "${tmp_output_file}"
        return
    fi
    while IFS= read -r domain; do
        key=$(printf "%s" "${domain}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="domain_${key}"
                ;;
        esac
        grep "^${key}\.value " "${tmp_output_file}" || printf "%s.value U\n" "${key}"
    done < "${state_file}"
    rm -f "${tmp_keys_file}" "${tmp_output_file}"
}

adguardhome_munin_config_percent() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args --upper-limit 100 --lower-limit 0" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's blocked query percentage" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home percent blocked" \
        "graph_vlabel percent blocked" \
        "graph_width ${graph_width}"
    adguardhome_munin_print \
        "percent_blocked" \
        "" \
        "90" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home percent blocked" \
        "percent blocked" \
        "100" \
        "0" \
        "${graph_type}" \
        "0:75"
}

adguardhome_munin_fetch_percent() {
    percent_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    if [ -z "${percent_response}" ]; then
        printf "percent_blocked.value U\n"
        return
    fi
    num_dns_queries=$(printf "%s" "${percent_response}" | jq -r '.num_dns_queries')
    num_blocked_filtering=$(printf "%s" "${percent_response}" | jq -r '.num_blocked_filtering')
    if [ -z "${num_dns_queries}" ] || [ "${num_dns_queries}" -eq "0" ]; then
        percent_blocked="0"
    else
        percent_blocked=$(awk "BEGIN { printf \"%.2f\", (${num_blocked_filtering}/${num_dns_queries})*100 }")
    fi
    printf "percent_blocked.value %s\n" "${percent_blocked}"
}

adguardhome_munin_config_processing() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's average DNS processing time" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home average processing time" \
        "graph_vlabel seconds" \
        "graph_width ${graph_width}"
    adguardhome_munin_print \
        "avg_processing_time" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home average processing time" \
        "avg processing time" \
        "" \
        "0" \
        "${graph_type}" \
        ""
}

adguardhome_munin_fetch_processing() {
    avg_processing_time=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats" \
        | jq -r '.avg_processing_time' \
        | awk -F. '{ printf "%d.%s\n", $1, substr($2 "000", 1, 3) }' \
        | sed 's/\.0*$//;s/\(\.[0-9]*[1-9]\)0*$/\1/')
    if [ -z "${avg_processing_time}" ]; then
        printf "avg_processing_time.value U\n"
        return
    fi
    printf "avg_processing_time.value %s\n" "${avg_processing_time}"
}

adguardhome_munin_config_queries() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's DNS query statistics" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home queries" \
        "graph_vlabel queries" \
        "graph_width ${graph_width}"
    adguardhome_munin_print \
        "num_dns_queries" \
        "" \
        "200000" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home DNS queries" \
        "num DNS queries" \
        "" \
        "0" \
        "${graph_type}" \
        "0:100000"
    adguardhome_munin_print \
        "num_blocked_filtering" \
        "" \
        "100000" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home blocked filtering" \
        "num blocked filtering" \
        "" \
        "0" \
        "${graph_type}" \
        "0:50000"
    adguardhome_munin_print \
        "num_replaced_safebrowsing" \
        "" \
        "100000" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home replaced safebrowsing" \
        "num replaced safebrowsing" \
        "" \
        "0" \
        "${graph_type}" \
        "0:50000"
    adguardhome_munin_print \
        "num_replaced_parental" \
        "" \
        "100000" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home replaced parental" \
        "num replaced parental" \
        "" \
        "0" \
        "${graph_type}" \
        "0:50000"
    adguardhome_munin_print \
        "num_replaced_safesearch" \
        "" \
        "100000" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home replaced safesearch" \
        "num replaced safesearch" \
        "" \
        "0" \
        "${graph_type}" \
        "0:50000"
}

adguardhome_munin_fetch_queries() {
    queries_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    if [ -z "${queries_response}" ]; then
        printf "num_dns_queries.value U\n"
        printf "num_blocked_filtering.value U\n"
        printf "num_replaced_safebrowsing.value U\n"
        printf "num_replaced_parental.value U\n"
        printf "num_replaced_safesearch.value U\n"
        return
    fi
    num_dns_queries=$(printf "%s" "${queries_response}" | jq -r '.num_dns_queries')
    num_blocked_filtering=$(printf "%s" "${queries_response}" | jq -r '.num_blocked_filtering')
    num_replaced_safebrowsing=$(printf "%s" "${queries_response}" | jq -r '.num_replaced_safebrowsing')
    num_replaced_parental=$(printf "%s" "${queries_response}" | jq -r '.num_replaced_parental')
    num_replaced_safesearch=$(printf "%s" "${queries_response}" | jq -r '.num_replaced_safesearch')
    printf "num_dns_queries.value %s\n" "${num_dns_queries:-0}"
    printf "num_blocked_filtering.value %s\n" "${num_blocked_filtering:-0}"
    printf "num_replaced_safebrowsing.value %s\n" "${num_replaced_safebrowsing:-0}"
    printf "num_replaced_parental.value %s\n" "${num_replaced_parental:-0}"
    printf "num_replaced_safesearch.value %s\n" "${num_replaced_safesearch:-0}"
}

adguardhome_munin_config_status() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args --lower-limit -1 --upper-limit 1" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's protection status" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home status" \
        "graph_vlabel unknown / disabled / enabled" \
        "graph_width ${graph_width}"
    adguardhome_munin_print \
        "protection_status" \
        "" \
        "0:1" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home protection status" \
        "protection status" \
        "" \
        "-1" \
        "1" \
        "${graph_type}" \
        "1:1"
}

adguardhome_munin_fetch_status() {
    status_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/status")
    protection_enabled=$(printf "%s" "${status_response}" | jq -r '.protection_enabled')
    case "${protection_enabled}" in
        "true")
            status_value="1"
            ;;
        "false")
            status_value="0"
            ;;
        *)
            status_value="-1"
            ;;
    esac
    printf "protection_status.value %s\n" "${status_value}"
}

adguardhome_munin_config_upstreams() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home upstreams" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} upstreams" \
        "graph_vlabel queries" \
        "graph_width ${graph_width}"
    upstreams_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/upstreams_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "upstreams_keys_tmp.XXXXXX")
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_responses[:${top_n}][] | to_entries[] | \"\(.key)\"" | \
    while read -r upstream; do
        printf "%s\n" "${upstream}" >> "${tmp_keys_file}"
    done
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
            mv "${tmp_keys_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "upstreams" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home upstreams" \
        "upstreams" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No upstreams" \
        "none"
}

adguardhome_munin_fetch_upstreams() {
    upstreams_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/upstreams_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "upstreams_keys_tmp.XXXXXX")
    tmp_output_file=$(mktemp "${state_dir}/upstreams_output_tmp.XXXXXX" 2>/dev/null || mktemp -t "upstreams_output_tmp.XXXXXX")
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_responses[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    while read -r upstream num_responses; do
        printf "%s\n" "${upstream}" >> "${tmp_keys_file}"
        key=$(printf "%s" "${upstream}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="upstreams_${key}"
                ;;
        esac
        printf "%s.value %s\n" "${key}" "${num_responses}" >> "${tmp_output_file}"
    done
    if [ -f "${state_file}" ]; then
        cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
        mv "${tmp_keys_file}.merged" "${state_file}"
    else
        mv "${tmp_keys_file}" "${state_file}"
    fi
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        rm -f "${tmp_output_file}"
        return
    fi
    while IFS= read -r upstream; do
        key=$(printf "%s" "${upstream}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="upstreams_${key}"
                ;;
        esac
        grep "^${key}\.value " "${tmp_output_file}" || printf "%s.value U\n" "${key}"
    done < "${state_file}"
    rm -f "${tmp_keys_file}" "${tmp_output_file}"
}

adguardhome_munin_config_upstreams_avg() {
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows average response time for top AdGuard Home upstreams" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home average upstream response time" \
        "graph_vlabel seconds" \
        "graph_width ${graph_width}"
    upstreams_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/upstreams_avg_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "upstreams_avg_keys_tmp.XXXXXX")
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_avg_time[:${top_n}][] | to_entries[] | \"\(.key)\"" | \
    while read -r upstream; do
        printf "%s\n" "${upstream}" >> "${tmp_keys_file}"
    done
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
            mv "${tmp_keys_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "upstreams_avg" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home upstreams average response time" \
        "upstreams_avg" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No upstreams" \
        "none"
}

adguardhome_munin_fetch_upstreams_avg() {
    upstreams_response=$(curl --connect-timeout 5 -k -s -L -b "${cookie_file}" "${api}/control/stats")
    tmp_keys_file=$(mktemp "${state_dir}/upstreams_avg_keys_tmp.XXXXXX" 2>/dev/null || mktemp -t "upstreams_avg_keys_tmp.XXXXXX")
    tmp_output_file=$(mktemp "${state_dir}/upstreams_avg_output_tmp.XXXXXX" 2>/dev/null || mktemp -t "upstreams_avg_output_tmp.XXXXXX")
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_avg_time[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    while read -r upstream avg_time; do
        printf "%s\n" "${upstream}" >> "${tmp_keys_file}"
        key=$(printf "%s" "${upstream}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="upstreams_avg_${key}"
                ;;
        esac
        upstreams_avg_time=$(printf "%s" "${avg_time}" | awk -F. '{ printf "%d.%s\n", $1, substr($2 "000", 1, 3) }' | sed 's/\.0*$//;s/\(\.[0-9]*[1-9]\)0*$/\1/')
        printf "%s.value %s\n" "${key}" "${upstreams_avg_time}" >> "${tmp_output_file}"
    done
    if [ -f "${state_file}" ]; then
        cat "${state_file}" "${tmp_keys_file}" | sort -u > "${tmp_keys_file}.merged"
        mv "${tmp_keys_file}.merged" "${state_file}"
    else
        mv "${tmp_keys_file}" "${state_file}"
    fi
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        rm -f "${tmp_output_file}"
        return
    fi
    while IFS= read -r upstream; do
        key=$(printf "%s" "${upstream}" | tr -c 'a-zA-Z0-9' '_')
        case "${key}" in
            [0-9]*)
                key="upstreams_avg_${key}"
                ;;
        esac
        grep "^${key}\.value " "${tmp_output_file}" || printf "%s.value U\n" "${key}"
    done < "${state_file}"
    rm -f "${tmp_keys_file}" "${tmp_output_file}"
}

adguardhome_munin_fetch_handler() {
    case "${adguardhome_munin_plugin_id}" in
        "blocked")
            adguardhome_munin_fetch_blocked
            ;;
        "clients")
            adguardhome_munin_fetch_clients
            ;;
        "domains")
            adguardhome_munin_fetch_domains
            ;;
        "percent")
            adguardhome_munin_fetch_percent
            ;;
        "processing")
            adguardhome_munin_fetch_processing
            ;;
        "queries")
            adguardhome_munin_fetch_queries
            ;;
        "status")
            adguardhome_munin_fetch_status
            ;;
        "upstreams")
            adguardhome_munin_fetch_upstreams
            ;;
        "upstreams_avg")
            adguardhome_munin_fetch_upstreams_avg
            ;;
        *)
            printf "%s\n" "Error: Cannot fetch for unrecognised plugin ID '${adguardhome_munin_plugin_id}'." >&2
            exit 1
            ;;
    esac
}

adguardhome_munin_config_handler() {
    case "${adguardhome_munin_plugin_id}" in
        "blocked")
            adguardhome_munin_config_blocked
            ;;
        "clients")
            adguardhome_munin_config_clients
            ;;
        "domains")
            adguardhome_munin_config_domains
            ;;
        "percent")
            adguardhome_munin_config_percent
            ;;
        "processing")
            adguardhome_munin_config_processing
            ;;
        "queries")
            adguardhome_munin_config_queries
            ;;
        "status")
            adguardhome_munin_config_status
            ;;
        "upstreams")
            adguardhome_munin_config_upstreams
            ;;
        "upstreams_avg")
            adguardhome_munin_config_upstreams_avg
            ;;
        *)
            printf "%s\n" "Error: Cannot config for unrecognised plugin ID '${adguardhome_munin_plugin_id}'." >&2
            exit 1
            ;;
    esac
    if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
        adguardhome_munin_fetch_handler
    fi
}

adguardhome_munin_check_dependencies() {
    plugin_dependencies="awk curl grep jq mktemp sed"
    for plugin_dependency in ${plugin_dependencies}; do
        if ! command -v "${plugin_dependency}" >/dev/null 2>&1; then
            return 1
        fi
    done
}

adguardhome_munin_suggest() {
    for adguardhome_munin_plugin in ${adguardhome_munin_plugins}; do
        printf "%s\n" \
            "${adguardhome_munin_plugin}"
    done
}

adguardhome_munin_autoconf() {
    if [ -z "${user}" ] || [ -z "${pass}" ]; then
        printf "no\n"
        return
    fi
    if ! adguardhome_munin_check_dependencies >/dev/null 2>&1; then
        printf "no\n"
        return
    fi
    if ! command -v AdGuardHome >/dev/null 2>&1 || [ ! -x "/opt/AdGuardHome/AdGuardHome" ]; then
        printf "no\n"
        return
    fi
    if [ -z "${adguardhome_munin_plugin_id}" ]; then
        # This should never happen
        printf "no\n"
        return
    fi
    printf "yes\n"
}

adguardhome_munin_auth || {
    printf "%s\n" "Error: Authentication failed. Please check your username and password." >&2
    exit 1
}

case "${1}" in
    ""|"fetch")
        adguardhome_munin_fetch_handler
        ;;
    "config")
        adguardhome_munin_config_handler
        ;;
    "suggest")
        adguardhome_munin_suggest
        ;;
    "autoconf")
        adguardhome_munin_autoconf
        ;;
    *)
        printf "Usage: %s [fetch|config|suggest|autoconf]\n" "${script_path}" >&2
esac

adguardhome_munin_logout || {
    printf "%s\n" "Error: Logout failed." >&2
    exit 1
}
