#!/bin/sh

#          _                       _ _                                 _
#  __ _ __| |__ _ _  _ __ _ _ _ __| | |_  ___ _ __  ___ _ __ _  _ _ _ (_)_ _
# / _` / _` / _` | || / _` | '_/ _` | ' \/ _ \ '  \/ -_) '  \ || | ' \| | ' \
# \__,_\__,_\__, |\_,_\__,_|_| \__,_|_||_\___/_|_|_\___|_|_|_\_,_|_||_|_|_||_|
#           |___/

# saint-lascivious (Hayden Pearce), 2025

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#%# family=manual
#%# capabilities=suggest

set -e

case "${0}" in
    /*)
        script_path="${0}"
    ;;
    *)
        script_path="$(cd "$(dirname "${0}")" && pwd)/$(basename "${0}")"
    ;;
esac

adguardhome_munin_plugin_id="$(printf "%s" "${script_path}" | sed -e 's/^.*adguardhome_munin_//')"

if [ -z "${adguardhome_munin_plugin_id}" ]; then
    # This should never happen
    adguardhome_munin_plugin_id="percent"
fi

adguardhome_munin_plugins="blocked clients domains percent processing queries status upstreams upstreams_avg"

proto="${proto:-"http"}"
host="${host:-"127.0.0.1"}"
port="${port:-"80"}"

api="${proto}://${host}:${port}"

login_endpoint="${login_endpoint:-"/control/login"}"
logout_endpoint="${logout_endpoint:-"/control/logout"}"
stats_endpoint="${stats_endpoint:-"/control/stats"}"
status_endpoint="${status_endpoint:-"/control/status"}"


top_n="${top_n:-"10"}"

if [ "${top_n}" -gt "20" ]; then
    top_n="20"
elif [ "${top_n}" -lt "1" ]; then
    top_n="1"
fi

agh_username="${username:-}"
agh_password="${password:-}"

graph="${graph:-"yes"}"
graph_args="${graph_args:-"--lower-limit 0"}"
graph_category="${graph_category:-"dns"}"
graph_draw="${graph_draw:-"LINE1"}"
graph_height="${graph_height:-"200"}"
graph_scale="${graph_scale:-"no"}"
[ "${graph_total:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total:-total}"
graph_type="${graph_type:-"DERIVE"}"
graph_width="${graph_width:-"400"}"

state_dir=${MUNIN_PLUGSTATE:-"/tmp/adguardhome_munin_"}
state_file="${state_dir}/${adguardhome_munin_plugin_id}.state"

adguardhome_munin_term_cleanup() {
    stty sane
    printf '\n'
}

adguardhome_munin_abort_handler() {
    adguardhome_munin_term_cleanup
    printf "%s\n" "Execution of '${script_path}' aborted (SIGINT or SIGTERM)." >&2
    exit 130
}

if [ "${__FUCK_YOU_SHELLCHECK:-}" = "1" ]; then
    adguardhome_munin_term_cleanup
    adguardhome_munin_abort_handler
fi

# Set terminal to sane mode on exit or interrupt
trap 'adguardhome_munin_abort_handler' INT TERM

mkdir -p "${state_dir}"

adguardhome_munin_mktemp() {
    # Create a temporary file in a specified directory with a given prefix.
    # Arguments:
    #   ${1} = directory (optional, defaults to /tmp if not provided)
    #   ${2} = filename prefix (required, defaults to "adguardhome_munin_" if not provided)
    #   Uses mktemp to ensure unique filenames.
    #   Falls back to mktemp -t if the directory argument is not supported.
    mktemp_dir="${1:-/tmp}"
    mktemp_prefix="${2:-adguardhome_munin_}"
    mktemp "${mktemp_dir}/${mktemp_prefix}.XXXXXX" 2>/dev/null || mktemp -t "${mktemp_prefix}.XXXXXX" || {
        # If mktemp fails, print an error message and exit with status 1.
        printf "%s\n" "  [❌] Unable to create temporary file '${mktemp_prefix}'." >&2
        exit 1
    }
}

# Create a temporary cookie file for storing session cookies
cookie_file=$(adguardhome_munin_mktemp "${state_dir}" "cookie_file")

# Ensure the cookie file is removed on exit
trap 'rm -f "${cookie_file}"' EXIT

adguardhome_munin_print() {
    # Print a Munin field definition for a given key and its attributes.
    # Arguments:
    #  ${1} = key (sanitized, must match Munin field requirements)
    #  ${2} = colour (hex RGB, optional)
    #  ${3} = critical (threshold value, optional)
    #  ${4} = draw (graph style, e.g. LINE1, AREA, etc., optional)
    #  ${5} = graph (yes/no, whether to graph this field)
    #  ${6} = info (description for this field)
    #  ${7} = label (human-readable label, will be sanitized below)
    #  ${8} = max (maximum value, optional)
    #  ${9} = min (minimum value, optional)
    # ${10} = type (GAUGE, COUNTER, etc., optional)
    # ${11} = warning (threshold value, optional)
    # Validate key format: must start with a letter or underscore, followed by alphanumerics/underscores
    if ! printf %s "${1}" | grep -Eq '^[a-zA-Z_][a-zA-Z0-9_]*$'; then
        printf "%s\n" "Error: Invalid or missing key." >&2
        exit 1
    fi
    # Sanitize label: remove backslash escape sequences and hash characters
    label_clean="$(printf "%s" "${7}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#')"
    # Truncate label if longer than 19 characters for Munin compatibility
    if [ "${#label_clean}" -gt 19 ]; then
        label_clean="$(printf "%s" "${label_clean}" | cut -c1-16)..."
    fi
    # Validate sanitized label
    if [ -z "${label_clean}" ]; then
        printf "%s\n" "Error: Invalid or missing label." >&2
        exit 1
    fi
    # Output colour if provided and valid (Munin expects 6-digit hex)
    if [ -n "${2}" ] && [ -n "$(printf '%s' "${2}" | tr -d '[:space:]')" ]; then
        colour_val="${2#\#}" # Remove leading hash if present
        # Expand 3-digit hex to 6-digit hex
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{3}$'; then
            r=$(printf %s "${colour_val}" | cut -c1)
            g=$(printf %s "${colour_val}" | cut -c2)
            b=$(printf %s "${colour_val}" | cut -c3)
            colour_val="${r}${r}${g}${g}${b}${b}"
        fi
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{6}$'; then
            printf "%s.colour %s\n" "${1}" "${colour_val}"
        fi
    fi
    # Output critical threshold if provided and valid
    if [ -n "${3}" ] && [ -n "$(printf '%s' "${3}" | tr -d '[:space:]')" ]; then
        if printf %s "${3}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.critical %s\n" "${1}" "${3}"
        fi
    fi
    # Output draw style if provided and valid
    if [ -n "${4}" ] && [ -n "$(printf '%s' "${4}" | tr -d '[:space:]')" ]; then
        if printf %s "${4}" | grep -Eq '^LINE[0-9]*$|^AREA$|^STACK$|^AREASTACK$|^LINESTACK[0-9]*$'; then
            printf "%s.draw %s\n" "${1}" "${4}"
        fi
    fi
    # Output graph flag if provided and valid
    if [ -n "${5}" ] && [ -n "$(printf '%s' "${5}" | tr -d '[:space:]')" ]; then
        case "${5}" in
            "yes"|"true")
                printf "%s.graph %s\n" "${1}" "yes"
            ;;
            "no"|"false")
                printf "%s.graph %s\n" "${1}" "no"
            ;;
        esac
    fi
    # Output info string if provided
    if [ -n "${6}" ] && [ -n "$(printf '%s' "${6}" | tr -d '[:space:]')" ]; then
        printf "%s.info %s\n" "${1}" "${6}"
    fi
    # Output sanitized label
    printf "%s.label %s\n" "${1}" "${label_clean}"
    # Output max value if provided and valid
    if [ -n "${8}" ] && [ -n "$(printf '%s' "${8}" | tr -d '[:space:]')" ]; then
        if printf %s "${8}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)$'; then
            printf "%s.max %s\n" "${1}" "${8}"
        fi
    fi
    # Output min value if provided and valid
    if [ -n "${9}" ] && [ -n "$(printf '%s' "${9}" | tr -d '[:space:]')" ]; then
        if printf %s "${9}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)$'; then
            printf "%s.min %s\n" "${1}" "${9}"
        fi
    fi
    # Output type if provided and valid (Munin expects GAUGE, COUNTER, DERIVE, ABSOLUTE)
    if [ -n "${10}" ] && [ -n "$(printf '%s' "${10}" | tr -d '[:space:]')" ]; then
        case "${10}" in
            "GAUGE"|"COUNTER"|"DERIVE"|"ABSOLUTE")
                printf "%s.type %s\n" "${1}" "${10}"
            ;;
        esac
    fi
    # Output warning threshold if provided and valid
    if [ -n "${11}" ] && [ -n "$(printf '%s' "${11}" | tr -d '[:space:]')" ]; then
        if printf %s "${11}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.warning %s\n" "${1}" "${11}"
        fi
    fi
}

adguardhome_munin_print_from_state() {
    # Print Munin field definitions for all keys in a state file.
    # Arguments:
    #  ${1} = state_file (file containing raw keys, one per line)
    #  ${2} = plugin_type (prefix for keys starting with a digit)
    #  ${3} = colour
    #  ${4} = critical
    #  ${5} = draw
    #  ${6} = graph
    #  ${7} = info
    #  ${8} = max
    #  ${9} = min
    # ${10} = type
    # ${11} = warning
    # ${12} = none_info (info string for "none" key if state file is empty)
    # ${13} = none_label (label for "none" key if state file is empty)
    if [ -s "${1}" ]; then
        # State file exists and is not empty
        while read -r raw_key _; do
            # Sanitize key: remove backslash escape sequences and hash, then replace non-alphanum with _
            key="$(printf "%s" "${raw_key}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#' | tr -c 'a-zA-Z0-9' '_')"
            case "${key}" in
                [0-9]*)
                    key="${2}_${key}"
                    ;;
            esac
            # Sanitize label: remove backslash escape sequences and hash
            label="$(printf "%s" "${raw_key}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#')"
            if [ "${#label}" -gt 19 ]; then
                label="$(printf "%s" "${label}" | cut -c1-16)..."
            fi
            if [ -z "${label}" ]; then
                label="invalid"
            fi
            adguardhome_munin_print \
                "${key}" \
                "${3}" \
                "${4}" \
                "${5}" \
                "${6}" \
                "${raw_key}" \
                "${label}" \
                "${8}" \
                "${9}" \
                "${10}" \
                "${11}"
        done < "${1}"
    else
        adguardhome_munin_print \
            "none" \
            "${3}" \
            "${4}" \
            "${5}" \
            "${6}" \
            "${12}" \
            "${13}" \
            "${8}" \
            "${9}" \
            "${10}" \
            "${11}"
    fi
}

adguardhome_munin_auth() {
    # Authenticate with AdGuard Home API and store session cookie.
    # Sends a POST request with username and password to the login endpoint.
    # Stores cookies in ${cookie_file} for subsequent requests.
    # Returns 0 on success, 1 on failure.
    auth_response=$(curl --connect-timeout 5 -k -s -L \
        -H "Content-Type: application/json" \
        -c "${cookie_file}" \
        -d "{\"name\":\"${agh_username}\",\"password\":\"${agh_password}\"}" \
        -w "\n%{http_code}" \
        "${api}${login_endpoint}")
    # Extract HTTP status code from response
    http_code=$(printf "%s" "${auth_response}" | tail -n1)
    case "${http_code}" in
        "200")
            # Login successful
            return 0
            ;;
        "400")
            # Invalid credentials
            printf "Error: Invalid username or password.\n" >&2
            return 1
            ;;
        "429")
            # Too many login attempts
            printf "Error: Out of login attempts.\n" >&2
            return 1
            ;;
        *)
            # Any other response code
            # This could indicate an API error or misconfiguration
            printf "Error: Unexpected HTTP response from AdGuard Home API (login): %s\n" "${http_code}" >&2
            return 1
            ;;
    esac
}

adguardhome_munin_logout() {
    # Log out from AdGuard Home API and clean up session cookie.
    # Sends a GET request to the logout endpoint using the stored cookie.
    # Removes the cookie file after logout.
    # Returns 0 on success, 1 on failure.
    logout_response=$(curl --connect-timeout 5 -k -s -L \
        -H "Content-Type: application/json" \
        -b "${cookie_file}" \
        -w "\n%{http_code}" \
        "${api}${logout_endpoint}")
    # Extract HTTP status code from response
    http_code=$(printf "%s" "${logout_response}" | tail -n1)
    rm -f "${cookie_file}"
    case "${http_code}" in
        "200")
            # Logout successful
            return 0
            ;;
        *)
            # Any other error
            printf "%s\n" "Error: Unexpected HTTP response from AdGuard Home API (logout): ${http_code}" >&2
            return 1
            ;;
    esac
}

adguardhome_munin_config_blocked() {
    # Output Munin graph configuration for the "blocked" plugin.
    # This sets up the graph's appearance and labels.
    # Query AdGuard Home API for blocked domain stats.
    blocked_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    # Extract the top blocked domains and their values, filter out lines with missing values.
    tmp_keys_file=$(adguardhome_munin_mktemp "${state_dir}" "blocked_keys_tmp")
    printf "%s\n" "${blocked_response}" | jq -r ".top_blocked_domains[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_keys_file}"
    # Merge new key-value pairs into the persistent state file, keeping the latest value for each key.
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            awk '
                { a[$1]=$2 }
                END { for (k in a) print k, a[k] }
            ' "${state_file}" "${tmp_keys_file}" > "${state_file}.merged"
            mv "${state_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    # Only print graph_total_line if the state file is non-empty
    if [ -s "${state_file}" ]; then
        print_total_line="${graph_total_line}"
    else
        print_total_line=""
    fi
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home blocked domains" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} blocked domains" \
        "${print_total_line}" \
        "graph_vlabel queries / second" \
        "graph_width ${graph_width}"
    # Print Munin field definitions for all keys in the state file.
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "blocked" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home blocked domains" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No blocked domains" \
        "none"
}

adguardhome_munin_fetch_blocked() {
    # Fetch current values for the "blocked" plugin.
    # Queries AdGuard Home API for blocked domain stats.
    blocked_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    tmp_state_file=$(adguardhome_munin_mktemp "${state_dir}" "blocked_state_tmp")
    # Extract domain and count pairs, filter out lines with missing values.
    printf "%s\n" "${blocked_response}" | jq -r ".top_blocked_domains[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_state_file}.filtered"
    # Merge new values into persistent state file, keeping the latest value for each key.
    if [ -f "${state_file}" ]; then
        awk '
            { a[$1]=$2 }
            END { for (k in a) print k, a[k] }
        ' "${state_file}" "${tmp_state_file}.filtered" > "${state_file}.merged"
        mv "${state_file}.merged" "${state_file}"
    else
        mv "${tmp_state_file}.filtered" "${state_file}"
    fi
    rm -f "${tmp_state_file}" "${tmp_state_file}.filtered"
    # Output values for Munin, fill-forward last known value, print U if missing.
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        return
    fi
    while read -r blocked_domain num_blocked; do
        key="$(printf "%s" "${blocked_domain}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#' | tr -c 'a-zA-Z0-9' '_')"
        case "${key}" in [0-9]*)
            key="blocked_${key}"
            ;;
        esac
        if [ -n "${num_blocked}" ]; then
            printf "%s.value %s\n" "${key}" "${num_blocked}"
        else
            printf "%s.value U\n" "${key}"
        fi
    done < "${state_file}"
}

adguardhome_munin_config_clients() {
    # Output Munin graph configuration for the "clients" plugin.
    # This sets up the graph's appearance and labels for top clients.
    # Query AdGuard Home API for client stats.
    clients_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    # Extract the top clients and their values, filter out lines with missing values.
    tmp_keys_file=$(adguardhome_munin_mktemp "${state_dir}" "clients_keys_tmp")
    printf "%s\n" "${clients_response}" | jq -r ".top_clients[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_keys_file}"
    # Merge new key-value pairs into the persistent state file, keeping the latest value for each key.
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            awk '
                { a[$1]=$2 }
                END { for (k in a) print k, a[k] }
            ' "${state_file}" "${tmp_keys_file}" > "${state_file}.merged"
            mv "${state_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    # Only print graph_total_line if the state file is non-empty
    if [ -s "${state_file}" ]; then
        print_total_line="${graph_total_line}"
    else
        print_total_line=""
    fi
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home clients" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} clients" \
        "${print_total_line}" \
        "graph_vlabel queries / second" \
        "graph_width ${graph_width}"
    # Print Munin field definitions for all keys in the state file.
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "client" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No clients" \
        "none"
}

adguardhome_munin_fetch_clients() {
    # Fetch current values for the "clients" plugin.
    # Queries AdGuard Home API for client stats.
    clients_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    tmp_state_file=$(adguardhome_munin_mktemp "${state_dir}" "clients_state_tmp")
    # Extract client and count pairs, filter out lines with missing values.
    printf "%s\n" "${clients_response}" | jq -r ".top_clients[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_state_file}.filtered"
    # Merge new values into persistent state file, keeping the latest value for each key.
    if [ -f "${state_file}" ]; then
        awk '
            { a[$1]=$2 }
            END { for (k in a) print k, a[k] }
        ' "${state_file}" "${tmp_state_file}.filtered" > "${state_file}.merged"
        mv "${state_file}.merged" "${state_file}"
    else
        mv "${tmp_state_file}.filtered" "${state_file}"
    fi
    rm -f "${tmp_state_file}" "${tmp_state_file}.filtered"
    # Output values for Munin, fill-forward last known value, print U if missing.
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        return
    fi
    while read -r client num_queries; do
        key="$(printf "%s" "${client}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#' | tr -c 'a-zA-Z0-9' '_')"
        case "${key}" in [0-9]*)
            key="client_${key}"
            ;;
        esac
        if [ -n "${num_queries}" ]; then
            printf "%s.value %s\n" "${key}" "${num_queries}"
        else
            printf "%s.value U\n" "${key}"
        fi
    done < "${state_file}"
}

adguardhome_munin_config_domains() {
    # Output Munin graph configuration for the "domains" plugin.
    # This sets up the graph's appearance and labels for top domains.
    # Query AdGuard Home API for domain stats.
    domains_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    # Extract the top domains and their values, filter out lines with missing values.
    tmp_keys_file=$(adguardhome_munin_mktemp "${state_dir}" "domains_keys_tmp")
    printf "%s\n" "${domains_response}" | jq -r ".top_queried_domains[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_keys_file}"
    # Merge new key-value pairs into the persistent state file, keeping the latest value for each key.
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            awk '
                { a[$1]=$2 }
                END { for (k in a) print k, a[k] }
            ' "${state_file}" "${tmp_keys_file}" > "${state_file}.merged"
            mv "${state_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    # Only print graph_total_line if the state file is non-empty
    if [ -s "${state_file}" ]; then
        print_total_line="${graph_total_line}"
    else
        print_total_line=""
    fi
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home domains" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} domains" \
        "${print_total_line}" \
        "graph_vlabel queries / second" \
        "graph_width ${graph_width}"
    # Print Munin field definitions for all keys in the state file.
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "domain" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No domains" \
        "none"
}

adguardhome_munin_fetch_domains() {
    # Fetch current values for the "domains" plugin.
    # Queries AdGuard Home API for domain stats.
    domains_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    tmp_state_file=$(adguardhome_munin_mktemp "${state_dir}" "domains_state_tmp")
    # Extract domain and count pairs, filter out lines with missing values.
    printf "%s\n" "${domains_response}" | jq -r ".top_queried_domains[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_state_file}.filtered"
    # Merge new values into persistent state file, keeping the latest value for each key.
    if [ -f "${state_file}" ]; then
        awk '
            { a[$1]=$2 }
            END { for (k in a) print k, a[k] }
        ' "${state_file}" "${tmp_state_file}.filtered" > "${state_file}.merged"
        mv "${state_file}.merged" "${state_file}"
    else
        mv "${tmp_state_file}.filtered" "${state_file}"
    fi
    rm -f "${tmp_state_file}" "${tmp_state_file}.filtered"
    # Output values for Munin, fill-forward last known value, print U if missing.
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        return
    fi
    while read -r domain num_queries; do
        key="$(printf "%s" "${domain}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#' | tr -c 'a-zA-Z0-9' '_')"
        case "${key}" in [0-9]*)
            key="domain_${key}"
            ;;
        esac
        if [ -n "${num_queries}" ]; then
            printf "%s.value %s\n" "${key}" "${num_queries}"
        else
            printf "%s.value U\n" "${key}"
        fi
    done < "${state_file}"
}

adguardhome_munin_config_percent() {
    # Output Munin graph configuration for the "percent" plugin.
    # This sets up the graph's appearance for blocked query percentage.
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args --upper-limit 100 --lower-limit 0" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's blocked query percentage" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home percent blocked" \
        "graph_vlabel percent blocked" \
        "graph_width ${graph_width}"
    # Print Munin field definition for percent blocked.
    adguardhome_munin_print \
        "percent_blocked" \
        "" \
        "90" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home percent blocked" \
        "percent blocked" \
        "100" \
        "0" \
        "GAUGE" \
        "0:75"
}

adguardhome_munin_fetch_percent() {
    # Fetch current value for the "percent" plugin.
    # Queries AdGuard Home API for DNS query and blocked stats.
    percent_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    if [ -z "${percent_response}" ]; then
        # Output unknown value if API response is empty.
        printf "percent_blocked.value U\n"
        return
    fi
    num_dns_queries=$(printf "%s" "${percent_response}" | jq -r '.num_dns_queries')
    num_blocked_filtering=$(printf "%s" "${percent_response}" | jq -r '.num_blocked_filtering')
    if [ -z "${num_dns_queries}" ] || [ "${num_dns_queries}" -eq "0" ]; then
        percent_blocked="0"
    else
        # Calculate percentage of blocked queries.
        percent_blocked=$(awk "BEGIN { printf \"%.2f\", (${num_blocked_filtering}/${num_dns_queries})*100 }")
    fi
    printf "percent_blocked.value %s\n" "${percent_blocked}"
}

adguardhome_munin_config_processing() {
    # Output Munin graph configuration for the "processing" plugin.
    # This sets up the graph's appearance for average DNS processing time.
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's average DNS processing time" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home average processing time" \
        "graph_vlabel seconds" \
        "graph_width ${graph_width}"
    # Print Munin field definition for average processing time.
    adguardhome_munin_print \
        "avg_processing_time" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home average processing time" \
        "avg processing time" \
        "" \
        "0" \
        "GAUGE" \
        ""
}

adguardhome_munin_fetch_processing() {
    # Fetch current value for the "processing" plugin.
    # Queries AdGuard Home API for average DNS processing time.
    processing_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    if [ -z "${processing_response}" ]; then
        # Output unknown value if API response is empty.
        printf "avg_processing_time.value U\n"
        return
    fi
    avg_processing_time=$(printf "%s" "${processing_response}" | jq -r '.avg_processing_time' \
        | awk -F. '{ printf "%d.%s\n", $1, substr($2 "000", 1, 3) }' \
        | sed 's/\.0*$//;s/\(\.[0-9]*[1-9]\)0*$/\1/')
    if [ -z "${avg_processing_time}" ]; then
        printf "avg_processing_time.value U\n"
        return
    fi
    printf "avg_processing_time.value %s\n" "${avg_processing_time}"
}

adguardhome_munin_config_queries() {
    # Output Munin graph configuration for the "queries" plugin.
    # This sets up the graph's appearance and labels for DNS query statistics.
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's DNS query statistics" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home queries" \
        "graph_vlabel queries / second" \
        "graph_width ${graph_width}"
    # Print Munin field definitions for each query statistic.
    adguardhome_munin_print \
        "num_dns_queries" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home DNS queries" \
        "queries" \
        "" \
        "0" \
        "${graph_type}" \
        ""
    adguardhome_munin_print \
        "num_blocked_filtering" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home blocked filtering" \
        "filtering" \
        "" \
        "0" \
        "${graph_type}" \
        ""
    adguardhome_munin_print \
        "num_replaced_safebrowsing" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home replaced safebrowsing" \
        "safebrowsing" \
        "" \
        "0" \
        "${graph_type}" \
        ""
    adguardhome_munin_print \
        "num_replaced_parental" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home replaced parental" \
        "parental" \
        "" \
        "0" \
        "${graph_type}" \
        ""
    adguardhome_munin_print \
        "num_replaced_safesearch" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home replaced safesearch" \
        "safesearch" \
        "" \
        "0" \
        "${graph_type}" \
        ""
}

adguardhome_munin_fetch_queries() {
    # Fetch current values for the "queries" plugin.
    # Queries AdGuard Home API for DNS query statistics.
    queries_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    if [ -z "${queries_response}" ]; then
        # Output unknown values if API response is empty.
        printf "num_dns_queries.value U\n"
        printf "num_blocked_filtering.value U\n"
        printf "num_replaced_safebrowsing.value U\n"
        printf "num_replaced_parental.value U\n"
        printf "num_replaced_safesearch.value U\n"
        return
    fi
    # Extract each statistic from the API response.
    num_dns_queries=$(printf "%s" "${queries_response}" | jq -r '.num_dns_queries')
    num_blocked_filtering=$(printf "%s" "${queries_response}" | jq -r '.num_blocked_filtering')
    num_replaced_safebrowsing=$(printf "%s" "${queries_response}" | jq -r '.num_replaced_safebrowsing')
    num_replaced_parental=$(printf "%s" "${queries_response}" | jq -r '.num_replaced_parental')
    num_replaced_safesearch=$(printf "%s" "${queries_response}" | jq -r '.num_replaced_safesearch')
    # Output values for Munin (default to 0 if missing).
    printf "num_dns_queries.value %s\n" "${num_dns_queries:-"0"}"
    printf "num_blocked_filtering.value %s\n" "${num_blocked_filtering:-"0"}"
    printf "num_replaced_safebrowsing.value %s\n" "${num_replaced_safebrowsing:-"0"}"
    printf "num_replaced_parental.value %s\n" "${num_replaced_parental:-"0"}"
    printf "num_replaced_safesearch.value %s\n" "${num_replaced_safesearch:-"0"}"
}

adguardhome_munin_config_status() {
    # Output Munin graph configuration for the "status" plugin.
    # This sets up the graph's appearance for protection status.
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args --lower-limit -1 --upper-limit 1" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows AdGuard Home's protection status" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home status" \
        "graph_vlabel unknown / disabled / enabled" \
        "graph_width ${graph_width}"
    # Print Munin field definition for protection status.
    adguardhome_munin_print \
        "protection_status" \
        "" \
        "0:1" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home protection status" \
        "status" \
        "" \
        "-1" \
        "1" \
        "GAUGE" \
        "1:1"
}

adguardhome_munin_fetch_status() {
    # Fetch current value for the "status" plugin.
    # Queries AdGuard Home API for protection status.
    status_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${status_endpoint}")
    protection_enabled=$(printf "%s" "${status_response}" | jq -r '.protection_enabled')
    case "${protection_enabled}" in
        "true")
            # Protection is enabled
            status_value="1"
            ;;
        "false")
            # Protection is disabled
            status_value="0"
            ;;
        *)
            # Some fuck shit
            status_value="-1"
            ;;
    esac
    # Output value for Munin (1 = enabled, 0 = disabled, -1 = unknown).
    printf "protection_status.value %s\n" "${status_value}"
}

adguardhome_munin_config_upstreams() {
    # Output Munin graph configuration for the "upstreams" plugin.
    # This sets up the graph's appearance and labels for top upstreams by query count.
    # Query AdGuard Home API for upstream stats.
    upstreams_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    # Extract the top upstreams and their values, filter out lines with missing values.
    tmp_keys_file=$(adguardhome_munin_mktemp "${state_dir}" "upstreams_keys_tmp")
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_responses[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_keys_file}"
    # Merge new key-value pairs into the persistent state file, keeping the latest value for each key.
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            awk '
                { a[$1]=$2 }
                END { for (k in a) print k, a[k] }
            ' "${state_file}" "${tmp_keys_file}" > "${state_file}.merged"
            mv "${state_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    # Only print graph_total_line if the state file is non-empty
    if [ -s "${state_file}" ]; then
        print_total_line="${graph_total_line}"
    else
        print_total_line=""
    fi
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows the top ${top_n} AdGuard Home upstreams" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home top ${top_n} upstreams" \
        "${print_total_line}" \
        "graph_vlabel queries / second" \
        "graph_width ${graph_width}"
    # Print Munin field definitions for all keys in the state file.
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "upstreams" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home upstreams" \
        "" \
        "0" \
        "${graph_type}" \
        "" \
        "No upstreams" \
        "none"
}

adguardhome_munin_fetch_upstreams() {
    # Fetch current values for the "upstreams" plugin.
    # Queries AdGuard Home API for upstream stats.
    upstreams_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    tmp_state_file=$(adguardhome_munin_mktemp "${state_dir}" "upstreams_state_tmp")
    # Extract upstreams and their response counts, filter out lines with missing values.
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_responses[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_state_file}.filtered"
    # Merge new values into persistent state file, keeping the latest value for each key.
    if [ -f "${state_file}" ]; then
        awk '
            { a[$1]=$2 }
            END { for (k in a) print k, a[k] }
        ' "${state_file}" "${tmp_state_file}.filtered" > "${state_file}.merged"
        mv "${state_file}.merged" "${state_file}"
    else
        mv "${tmp_state_file}.filtered" "${state_file}"
    fi
    rm -f "${tmp_state_file}" "${tmp_state_file}.filtered"
    # Output values for Munin, fill-forward last known value, print U if missing.
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        return
    fi
    while read -r upstream num_responses; do
        key="$(printf "%s" "${upstream}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#' | tr -c 'a-zA-Z0-9' '_')"
        case "${key}" in [0-9]*)
            key="upstreams_${key}"
            ;;
        esac
        if [ -n "${num_responses}" ]; then
            printf "%s.value %s\n" "${key}" "${num_responses}"
        else
            printf "%s.value U\n" "${key}"
        fi
    done < "${state_file}"
}

adguardhome_munin_config_upstreams_avg() {
    # Output Munin graph configuration for the "upstreams_avg" plugin.
    # This sets up the graph's appearance and labels for average upstream response time.
    # Query AdGuard Home API for average upstream response times.
    upstreams_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    # Extract the top upstreams and their values, filter out lines with missing values.
    tmp_keys_file=$(adguardhome_munin_mktemp "${state_dir}" "upstreams_avg_keys_tmp")
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_avg_time[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' > "${tmp_keys_file}"
    # Merge new key-value pairs into the persistent state file, keeping the latest value for each key.
    if [ -s "${tmp_keys_file}" ]; then
        if [ -f "${state_file}" ]; then
            awk '
                { a[$1]=$2 }
                END { for (k in a) print k, a[k] }
            ' "${state_file}" "${tmp_keys_file}" > "${state_file}.merged"
            mv "${state_file}.merged" "${state_file}"
        else
            mv "${tmp_keys_file}" "${state_file}"
        fi
    fi
    rm -f "${tmp_keys_file}"
    printf "%s\n" \
        "graph ${graph}" \
        "graph_args ${graph_args}" \
        "graph_category ${graph_category}" \
        "graph_height ${graph_height}" \
        "graph_info This graph shows average response time for the top ${top_n} AdGuard Home upstreams" \
        "graph_scale ${graph_scale}" \
        "graph_title AdGuard Home average upstream response time" \
        "graph_vlabel seconds" \
        "graph_width ${graph_width}"
    # Print Munin field definitions for all keys in the state file.
    adguardhome_munin_print_from_state \
        "${state_file}" \
        "upstreams_avg" \
        "" \
        "" \
        "${graph_draw}" \
        "yes" \
        "AdGuard Home upstreams average response time" \
        "" \
        "0" \
        "GAUGE" \
        "" \
        "No upstreams" \
        "none"
}

adguardhome_munin_fetch_upstreams_avg() {
    # Fetch current values for the "upstreams_avg" plugin.
    # Queries AdGuard Home API for average upstream response times.
    upstreams_response=$(curl --connect-timeout 5 -k -s -L \
        -b "${cookie_file}" \
        "${api}${stats_endpoint}")
    tmp_state_file=$(adguardhome_munin_mktemp "${state_dir}" "upstreams_avg_state_tmp")
    # Extract average response times for each upstream, format to three decimals, filter out missing values.
    printf "%s\n" "${upstreams_response}" | jq -r ".top_upstreams_avg_time[:${top_n}][] | to_entries[] | \"\(.key) \(.value)\"" | \
    awk 'NF == 2' | while read -r upstream avg_time; do
        # Format average time to three decimal places, strip trailing zeros.
        upstreams_avg_time=$(printf "%s" "${avg_time}" | awk -F. '{ printf "%d.%s\n", $1, substr($2 "000", 1, 3) }' | sed 's/\.0*$//;s/\(\.[0-9]*[1-9]\)0*$/\1/')
        printf "%s %s\n" "${upstream}" "${upstreams_avg_time}" >> "${tmp_state_file}.filtered"
    done
    # Merge new values into persistent state file, keeping the latest value for each key.
    if [ -f "${state_file}" ]; then
        awk '
            { a[$1]=$2 }
            END { for (k in a) print k, a[k] }
        ' "${state_file}" "${tmp_state_file}.filtered" > "${state_file}.merged"
        mv "${state_file}.merged" "${state_file}"
    else
        mv "${tmp_state_file}.filtered" "${state_file}"
    fi
    rm -f "${tmp_state_file}" "${tmp_state_file}.filtered"
    # Output values for Munin, fill-forward last known value, print U if missing.
    if [ ! -s "${state_file}" ]; then
        printf "none.value 0\n"
        return
    fi
    while read -r upstream avg_time; do
        key="$(printf "%s" "${upstream}" | sed 's/\\[0-9]\{3\}//g' | tr -d '#' | tr -c 'a-zA-Z0-9' '_')"
        case "${key}" in [0-9]*)
            key="upstreams_avg_${key}"
            ;;
        esac
        if [ -n "${avg_time}" ]; then
            printf "%s.value %s\n" "${key}" "${avg_time}"
        else
            printf "%s.value U\n" "${key}"
        fi
    done < "${state_file}"
}

adguardhome_munin_fetch() {
    # Dispatch fetch operation to the appropriate plugin-specific fetch function.
    # Uses the plugin ID to select which data to retrieve.
    case "${adguardhome_munin_plugin_id}" in
        "blocked")
            adguardhome_munin_fetch_blocked
            ;;
        "clients")
            adguardhome_munin_fetch_clients
            ;;
        "domains")
            adguardhome_munin_fetch_domains
            ;;
        "percent")
            adguardhome_munin_fetch_percent
            ;;
        "processing")
            adguardhome_munin_fetch_processing
            ;;
        "queries")
            adguardhome_munin_fetch_queries
            ;;
        "status")
            adguardhome_munin_fetch_status
            ;;
        "upstreams")
            adguardhome_munin_fetch_upstreams
            ;;
        "upstreams_avg")
            adguardhome_munin_fetch_upstreams_avg
            ;;
        *)
            # Unknown plugin ID
            printf "%s\n" "Error: Cannot fetch for unrecognised plugin ID '${adguardhome_munin_plugin_id}'." >&2
            exit 1
            ;;
    esac
}

adguardhome_munin_config() {
    # Dispatch config operation to the appropriate plugin-specific config function.
    # Uses the plugin ID to select which config to output.
    case "${adguardhome_munin_plugin_id}" in
        "blocked")
            adguardhome_munin_config_blocked
            ;;
        "clients")
            adguardhome_munin_config_clients
            ;;
        "domains")
            adguardhome_munin_config_domains
            ;;
        "percent")
            adguardhome_munin_config_percent
            ;;
        "processing")
            adguardhome_munin_config_processing
            ;;
        "queries")
            adguardhome_munin_config_queries
            ;;
        "status")
            adguardhome_munin_config_status
            ;;
        "upstreams")
            adguardhome_munin_config_upstreams
            ;;
        "upstreams_avg")
            adguardhome_munin_config_upstreams_avg
            ;;
        *)
            # Unknown plugin ID
            printf "%s\n" "Error: Cannot config for unrecognised plugin ID '${adguardhome_munin_plugin_id}'." >&2
            exit 1
            ;;
    esac
    # If Munin requests dirtyconfig, also output current values after config
    if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
        adguardhome_munin_fetch
    fi
}

adguardhome_munin_check_dependencies() {
    # Check for required external commands.
    # Returns 1 if any dependency is missing, 0 otherwise.
    plugin_dependencies="awk curl grep jq mktemp sed"
    for plugin_dependency in ${plugin_dependencies}; do
        if ! command -v "${plugin_dependency}" >/dev/null 2>&1; then
            return 1
        fi
    done
}

adguardhome_munin_suggest() {
    # Output a list of supported plugin IDs for Munin's suggest mode.
    for adguardhome_munin_plugin in ${adguardhome_munin_plugins}; do
        printf "%s\n" "${adguardhome_munin_plugin}"
    done
}

adguardhome_munin_autoconf() {
    # Munin autoconf: check if the plugin might be useful on this system.
    # Returns "yes" if all requirements are met, "no" otherwise.
    if [ -z "${agh_username}" ] || [ -z "${agh_password}" ]; then
        # Missing credentials
        printf "no\n"
        return
    fi
    if ! adguardhome_munin_check_dependencies >/dev/null 2>&1; then
        # Missing at least one required dependency
        printf "no\n"
        return
    fi
    if ! command -v AdGuardHome >/dev/null 2>&1 || [ ! -x "/opt/AdGuardHome/AdGuardHome" ]; then
        # AdGuard Home binary not found or not executable
        # Probably not an AdGuard Home host
        printf "no\n"
        return
    fi
    if [ -z "${adguardhome_munin_plugin_id}" ]; then
        # This should never happen
        printf "no\n"
        return
    fi
    if ! adguardhome_munin_auth >/dev/null 2>&1; then
        # Authentication failed
        printf "no\n"
        return
    fi
    # All checks passed, plugin can run
    # Log out from AdGuard Home API
    adguardhome_munin_logout >/dev/null 2>&1 || true  # Ignore logout errors
    # Return "yes" to indicate plugin can run
    printf "yes\n"
}

adguardhome_munin_flush_state() {
    # Flush state files for all plugins that use them.
    # Prints the names of removed state files, or a message if none were found.
    flushed=0
    # Only attempt to remove state files for plugins that use them.
    for plugin in blocked clients domains upstreams upstreams_avg; do
        state_file="${state_dir}/${plugin}.state"
        if [ -f "${state_file}" ]; then
            # Remove the state file and print its name
            rm -f "${state_file}" 2>/dev/null && printf "%s\n" "${state_file}"
            flushed=1
        fi
    done
    # If no state files were found, print a message
    [ "$flushed" -eq 0 ] && printf "No state files to flush.\n"
    exit 0
}

# Authenticate with AdGuard Home API before running any plugin operation.
adguardhome_munin_auth || {
    printf "%s\n" "Error: Authentication failed. Please check your username and password." >&2
    exit 1
}

# Main entry point: dispatch based on first argument.
case "${1}" in
    ""|"fetch")
        # Default or "fetch": output current values
        adguardhome_munin_fetch
        ;;
    "config")
        # "config": output Munin graph configuration
        adguardhome_munin_config    
        ;;
    "suggest")
        # "suggest": output supported plugin IDs
        adguardhome_munin_suggest
        ;;
    "autoconf")
        # "autoconf": check if plugin can run
        adguardhome_munin_autoconf
        ;;
    "flush")
        # "flush": remove all dynamic state files
        adguardhome_munin_flush_state
        ;;
    *)
        # Unknown argument: print usage
        printf "Usage: %s [config|fetch]\n" "${script_path}" >&2
esac

# Log out from AdGuard Home API and clean up session cookie.
adguardhome_munin_logout || {
    printf "%s\n" "Error: Logout failed." >&2
    exit 1
}

#    /\_/\  
#   ( O.O ) 
#    > ^ < ((
#   /     \ ))
#   \\ | / \/
#   ((_|_) _)

exit 0
